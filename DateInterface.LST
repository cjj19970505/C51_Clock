C51 COMPILER V9.59.0.0   DATEINTERFACE                                                     01/10/2019 23:20:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DATEINTERFACE
OBJECT MODULE PLACED IN DateInterface.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE DateInterface.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "Looper\\Looper.h"
   2          #include "DateInterface.h"
   3          #include "Date.h"
   4          #include "Utility.h"
   5          #include "SegScreen\\SegScreen.h"
   6          #include "TaskUtility.h"
   7          #include "Input.h"
   8          #define DATEINTERFACE_LOOP_ZERONUM 8
   9          #define DATEINTERFACE_STRING_LENGTH 10
  10          #define DATEINTERFACE_LOOP_INTERVAL 50
  11          
  12          #define MODE_RUNNING 0
  13          #define MODE_SETTING 1
  14          #define MODE_EXIT -1
  15          
  16          #define SPARKING_DURATION 300
  17          #define SPARKING_STATE_SHOW 0
  18          #define SPARKING_STATE_HIDE 1
  19          
  20          #define SETTING_ITEM_YEAR 0
  21          #define SETTING_ITEM_MONTH 1
  22          #define SETTING_ITEM_DAY 2
  23          
  24          #define KEYCODE_SETTING INPUT_TOKEYCODE(1,1)
  25          #define KEYCODE_SETTING_SHIFT_ITEM INPUT_TOKEYCODE(1,2)
  26          #define KEYCODE_SETTING_ADD INPUT_TOKEYCODE(1,3)
  27          #define KEYCODE_SETTING_SUB INPUT_TOKEYCODE(2,3)
  28          DATE dateInterface_Date;
  29          
  30          #define VIEW_LOOP_INDEX TaskUtility_Public_Var_uChar1
  31          #define VIEW_LOOP_TIMER TaskUtility_Public_Var_uChar2
  32          #define SEG_VIEW_ARRAY TaskUtility_Public_Var_SegViewArr
  33          
  34          #define SETTING_ITEM TaskUtility_Public_Var_uChar3
  35          #define SETTING_ITEM_SPARK_TIMER TaskUtility_Public_Var_uChar4
  36          #define SETTING_ITEM_SPARKSTATE TaskUtility_Public_Var_uChar5
  37          
  38          unsigned char dateInterface_temp_i;
  39          char dateInterface_Mode = MODE_EXIT;
  40          void DateInterface_Init()
  41          {
  42   1        DATE_SET_YEAR(dateInterface_Date, 2019);
  43   1        DATE_SET_MONTH(dateInterface_Date, 9);
  44   1        DATE_SET_DAY(dateInterface_Date, 12);
  45   1      }
  46          void DateInterface_LooperUpdate(LOOPER *looper)
  47          {
  48   1        char loopIndex = 0;
  49   1        if(dateInterface_Mode == MODE_EXIT)
  50   1        {
  51   2          return;
  52   2        }
  53   1        
  54   1        for(dateInterface_temp_i = 0; dateInterface_temp_i < 8; dateInterface_temp_i++)
  55   1        {
C51 COMPILER V9.59.0.0   DATEINTERFACE                                                     01/10/2019 23:20:40 PAGE 2   

  56   2          loopIndex = (dateInterface_temp_i + VIEW_LOOP_INDEX) % (DATEINTERFACE_STRING_LENGTH + DATEINTERFACE_LOOP
             -_ZERONUM);
  57   2          if((dateInterface_temp_i + VIEW_LOOP_INDEX) % (DATEINTERFACE_STRING_LENGTH + DATEINTERFACE_LOOP_ZERONUM)
             - >= DATEINTERFACE_STRING_LENGTH)
  58   2          {
  59   3            SEG_VIEW_ARRAY[dateInterface_temp_i] = ' ';
  60   3          }
  61   2          else
  62   2          {
  63   3            if(loopIndex == 0)
  64   3            {
  65   4              Int_To_Chars(DATE_GET_YEAR(dateInterface_Date), 4, &(SEG_VIEW_ARRAY[dateInterface_temp_i]));
  66   4            }
  67   3            else if(loopIndex == 4)
  68   3            {
  69   4              SEG_VIEW_ARRAY[dateInterface_temp_i] = '-';
  70   4            }
  71   3            else if(loopIndex == 5)
  72   3            {
  73   4              Int_To_Chars(DATE_GET_MONTH(dateInterface_Date), 2, &(SEG_VIEW_ARRAY[dateInterface_temp_i]));
  74   4            }
  75   3            else if(loopIndex == 7)
  76   3            {
  77   4              SEG_VIEW_ARRAY[dateInterface_temp_i] = '-';
  78   4            }
  79   3            else if(loopIndex == 8)
  80   3            {
  81   4              Int_To_Chars(DATE_GET_DAY(dateInterface_Date), 2, &(SEG_VIEW_ARRAY[dateInterface_temp_i]));
  82   4            }
  83   3          }
  84   2        }
  85   1        SEG_VIEW_ARRAY[8] = '\0';
  86   1        
  87   1        if(dateInterface_Mode == MODE_RUNNING)
  88   1        {
  89   2          if(Input_GetKeyDown() == KEYCODE_SETTING)
  90   2          {
  91   3            dateInterface_Mode = MODE_SETTING;
  92   3            SETTING_ITEM = SETTING_ITEM_YEAR;
  93   3            VIEW_LOOP_INDEX = 0;
  94   3          }
  95   2        }
  96   1        else if(dateInterface_Mode == MODE_SETTING)
  97   1        {
  98   2          
  99   2          if(Input_GetKeyDown() == KEYCODE_SETTING)
 100   2          {
 101   3            dateInterface_Mode = MODE_RUNNING;
 102   3            VIEW_LOOP_INDEX = 0;
 103   3            SETTING_ITEM = SETTING_ITEM_YEAR;
 104   3            SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
 105   3            SETTING_ITEM_SPARK_TIMER = 0;
 106   3          }
 107   2          else if(Input_GetKeyDown() == KEYCODE_SETTING_SHIFT_ITEM)
 108   2          {
 109   3            SETTING_ITEM = (SETTING_ITEM + 1) % 3;
 110   3            SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
 111   3            SETTING_ITEM_SPARK_TIMER = 0;
 112   3          }
 113   2          
 114   2          SETTING_ITEM_SPARK_TIMER += looper->deltaTime;
 115   2          if(SETTING_ITEM_SPARK_TIMER >= SPARKING_DURATION/2)
C51 COMPILER V9.59.0.0   DATEINTERFACE                                                     01/10/2019 23:20:40 PAGE 3   

 116   2          {
 117   3            SETTING_ITEM_SPARKSTATE = (SETTING_ITEM_SPARKSTATE == SPARKING_STATE_SHOW) ? SPARKING_STATE_HIDE : SPAR
             -KING_STATE_SHOW;
 118   3            SETTING_ITEM_SPARK_TIMER = 0;
 119   3          }
 120   2          
 121   2          if(Input_GetKeyDown() == KEYCODE_SETTING_ADD || Input_GetKeyDown() == KEYCODE_SETTING_SUB)
 122   2          {
 123   3            SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
 124   3            SETTING_ITEM_SPARK_TIMER = 0;
 125   3          }
 126   2          
 127   2          if(SETTING_ITEM == SETTING_ITEM_YEAR)
 128   2          {
 129   3            VIEW_LOOP_INDEX = 0;
 130   3            if(Input_GetKeyDown() == KEYCODE_SETTING_ADD)
 131   3            {
 132   4              if(DATE_GET_YEAR(dateInterface_Date)+1 >= 2100)
 133   4              {
 134   5                DATE_SET_YEAR(dateInterface_Date, 2000);
 135   5              }
 136   4              else
 137   4              {
 138   5                DATE_SET_YEAR(dateInterface_Date, DATE_GET_YEAR(dateInterface_Date)+1);
 139   5              }
 140   4            }
 141   3            else if(Input_GetKeyDown() == KEYCODE_SETTING_SUB)
 142   3            {
 143   4              if(DATE_GET_YEAR(dateInterface_Date)-1 <= 1999)
 144   4              {
 145   5                DATE_SET_YEAR(dateInterface_Date, 2099);
 146   5              }
 147   4              else
 148   4              {
 149   5                DATE_SET_YEAR(dateInterface_Date, DATE_GET_YEAR(dateInterface_Date)-1);
 150   5              }
 151   4            }
 152   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
 153   3            {
 154   4              SEG_VIEW_ARRAY[0] = ' ';
 155   4              SEG_VIEW_ARRAY[1] = ' ';
 156   4              SEG_VIEW_ARRAY[2] = ' ';
 157   4              SEG_VIEW_ARRAY[3] = ' ';
 158   4            }
 159   3          }
 160   2          else if(SETTING_ITEM == SETTING_ITEM_MONTH)
 161   2          {
 162   3            VIEW_LOOP_INDEX = 0;
 163   3            if(Input_GetKeyDown() == KEYCODE_SETTING_ADD)
 164   3            {
 165   4              if(DATE_GET_MONTH(dateInterface_Date)+1 >= 13)
 166   4              {
 167   5                DATE_SET_MONTH(dateInterface_Date, 1);
 168   5              }
 169   4              else
 170   4              {
 171   5                DATE_SET_MONTH(dateInterface_Date, DATE_GET_MONTH(dateInterface_Date)+1);
 172   5              }
 173   4            }
 174   3            else if(Input_GetKeyDown() == KEYCODE_SETTING_SUB)
 175   3            {
 176   4              if(DATE_GET_MONTH(dateInterface_Date)-1 <= 0)
C51 COMPILER V9.59.0.0   DATEINTERFACE                                                     01/10/2019 23:20:40 PAGE 4   

 177   4              {
 178   5                DATE_SET_MONTH(dateInterface_Date, 12);
 179   5              }
 180   4              else
 181   4              {
 182   5                DATE_SET_MONTH(dateInterface_Date, DATE_GET_MONTH(dateInterface_Date)-1);
 183   5              }
 184   4            }
 185   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
 186   3            {
 187   4              SEG_VIEW_ARRAY[5] = ' ';
 188   4              SEG_VIEW_ARRAY[6] = ' ';
 189   4            }
 190   3          }
 191   2          else if(SETTING_ITEM == SETTING_ITEM_DAY)
 192   2          {
 193   3            VIEW_LOOP_INDEX = 2;
 194   3            if(Input_GetKeyDown() == KEYCODE_SETTING_ADD)
 195   3            {
 196   4              if(DATE_GET_DAY(dateInterface_Date)+1 >= 32)
 197   4              {
 198   5                DATE_SET_DAY(dateInterface_Date, 1);
 199   5              }
 200   4              else
 201   4              {
 202   5                DATE_SET_DAY(dateInterface_Date, DATE_GET_DAY(dateInterface_Date)+1);
 203   5              }
 204   4            }
 205   3            else if(Input_GetKeyDown() == KEYCODE_SETTING_SUB)
 206   3            {
 207   4              if(DATE_GET_DAY(dateInterface_Date)-1 <= 0)
 208   4              {
 209   5                DATE_SET_DAY(dateInterface_Date, 31);
 210   5              }
 211   4              else
 212   4              {
 213   5                DATE_SET_DAY(dateInterface_Date, DATE_GET_DAY(dateInterface_Date)-1);
 214   5              }
 215   4            }
 216   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
 217   3            {
 218   4              SEG_VIEW_ARRAY[6] = ' ';
 219   4              SEG_VIEW_ARRAY[7] = ' ';
 220   4            }
 221   3          }
 222   2        }
 223   1        
 224   1        SegScreen_Print_String(SEG_VIEW_ARRAY);
 225   1        
 226   1        if(dateInterface_Mode == MODE_RUNNING)
 227   1        {
 228   2          if(VIEW_LOOP_TIMER >= DATEINTERFACE_LOOP_INTERVAL)
 229   2          {
 230   3            VIEW_LOOP_TIMER = 0;
 231   3            VIEW_LOOP_INDEX = (1 + VIEW_LOOP_INDEX) % (DATEINTERFACE_STRING_LENGTH + DATEINTERFACE_LOOP_ZERONUM);
 232   3          }
 233   2          VIEW_LOOP_TIMER += looper->deltaTime;
 234   2        }
 235   1        
 236   1      }
 237          
 238          void DateInterface_EnterTask()
C51 COMPILER V9.59.0.0   DATEINTERFACE                                                     01/10/2019 23:20:40 PAGE 5   

 239          {
 240   1        VIEW_LOOP_INDEX = 0;
 241   1        VIEW_LOOP_TIMER = 0;
 242   1        dateInterface_Mode = MODE_RUNNING;
 243   1      }
 244          
 245          void DateInterface_ExitTask()
 246          {
 247   1        dateInterface_Mode = MODE_EXIT;
 248   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    869    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
