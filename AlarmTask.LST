C51 COMPILER V9.59.0.0   ALARMTASK                                                         01/10/2019 23:20:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ALARMTASK
OBJECT MODULE PLACED IN AlarmTask.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE AlarmTask.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "Looper\\Looper.h"
   2          #include "AlarmTask.h"
   3          #include "Time.h"
   4          #include "Input.h"
   5          #include "SegScreen\\SegScreen.h"
   6          #include "Date.h"
   7          #include "TaskUtility.h"
   8          #include "TaskSelector.h"
   9          #define IN_FOREGROUND (TASKSELECTOR_CURRENT_MODE == TASKSELECTOR_MODE_ALARM)
  10          #define KEYCODE_SETTING INPUT_TOKEYCODE(1,1)
  11          #define KEYCODE_SETTING_SHIFT_ITEM INPUT_TOKEYCODE(1,2)
  12          #define KEYCODE_SETTING_SETTING_ADD INPUT_TOKEYCODE(1,3)
  13          #define KEYCODE_SETTING_SETTING_SUB INPUT_TOKEYCODE(2,3)
  14          #define MODE_SETTING 1
  15          #define MODE_RUNNING 0
  16          #define MODE_EXIT 2
  17          #define SPARKING_DURATION 300
  18          #define SPARKING_STATE_SHOW 0
  19          #define SPARKING_STATE_HIDE 1
  20          #define SETTING_ITEM_HOUR 0
  21          #define SETTING_ITEM_MINUTE 1
  22          TIME alarmTask_Time;
  23          char alarmTask_Mode = MODE_EXIT;  //0:Run Setting
  24          #define SETTING_ITEM TaskUtility_Public_Var_uChar1
  25          #define SETTING_ITEM_SPARK_TIMER TaskUtility_Public_Var_uChar2
  26          #define SETTING_ITEM_SPARKSTATE TaskUtility_Public_Var_uChar3
  27          #define SEG_VIEW_ARRAY TaskUtility_Public_Var_SegViewArr
  28          //char alarmTask_SettingItem = 0; //0:Hour 1:Minute 2:Second
  29          //int SETTING_ITEM_SPARK_TIMER = 0;
  30          //char SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
  31          void AlarmTask_Init()
  32          {
  33   1        alarmTask_Mode = MODE_EXIT;
  34   1        TIME_SET_HOUR(alarmTask_Time, 0);
  35   1        TIME_SET_MINUTE(alarmTask_Time, 0);
  36   1        TIME_SET_SECOND(alarmTask_Time, 0);
  37   1      }
  38          void AlarmTask_LooperUpdate(LOOPER *looper)
  39          {
  40   1        if(IN_FOREGROUND)
  41   1        {
  42   2          Time_ToString(&alarmTask_Time, '-', 0, SEG_VIEW_ARRAY);
  43   2          SEG_VIEW_ARRAY[5] = ' ';
  44   2          SEG_VIEW_ARRAY[6] = ' ';
  45   2          SEG_VIEW_ARRAY[7] = ' ';
  46   2        }
  47   1        if(alarmTask_Mode == MODE_RUNNING)
  48   1        {
  49   2          if(Input_GetKeyDown() == KEYCODE_SETTING)
  50   2          {
  51   3            alarmTask_Mode = MODE_SETTING;
  52   3          }
  53   2        }
  54   1        else if(alarmTask_Mode == MODE_SETTING)
  55   1        {
C51 COMPILER V9.59.0.0   ALARMTASK                                                         01/10/2019 23:20:41 PAGE 2   

  56   2          SETTING_ITEM_SPARK_TIMER += looper->deltaTime;
  57   2          if(SETTING_ITEM_SPARK_TIMER >= SPARKING_DURATION/2)
  58   2          {
  59   3            SETTING_ITEM_SPARKSTATE = (SETTING_ITEM_SPARKSTATE == SPARKING_STATE_SHOW) ? SPARKING_STATE_HIDE : SPAR
             -KING_STATE_SHOW;
  60   3            SETTING_ITEM_SPARK_TIMER = 0;
  61   3            
  62   3          }
  63   2          if(Input_GetKeyDown() == KEYCODE_SETTING)
  64   2          {
  65   3            alarmTask_Mode = MODE_RUNNING;
  66   3            SETTING_ITEM = 0;
  67   3            SETTING_ITEM_SPARK_TIMER = 0;
  68   3            SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
  69   3          }
  70   2          else if(Input_GetKeyDown() == KEYCODE_SETTING_SHIFT_ITEM)
  71   2          {
  72   3            SETTING_ITEM++;
  73   3            SETTING_ITEM %= 2;
  74   3          }
  75   2          if(SETTING_ITEM == SETTING_ITEM_HOUR)
  76   2          {
  77   3            if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD || Input_GetKeyDown() == KEYCODE_SETTING_SETTING_S
             -UB)
  78   3            {
  79   4              if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD)
  80   4              {
  81   5                TIME_SET_HOUR(alarmTask_Time, (TIME_GET_HOUR(alarmTask_Time) + 1)%24);
  82   5              }
  83   4              else
  84   4              {
  85   5                TIME_SET_HOUR(alarmTask_Time, TIME_GET_HOUR(alarmTask_Time) == 0 ? 23 : (TIME_GET_HOUR(alarmTask_Time
             -) - 1));
  86   5              }
  87   4              SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
  88   4              SETTING_ITEM_SPARK_TIMER = 0;
  89   4              
  90   4            }
  91   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
  92   3            {
  93   4              SEG_VIEW_ARRAY[0] = ' ';
  94   4              SEG_VIEW_ARRAY[1] = ' ';
  95   4            }
  96   3          }
  97   2          else if(SETTING_ITEM == SETTING_ITEM_MINUTE)
  98   2          {
  99   3            if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD || Input_GetKeyDown() == KEYCODE_SETTING_SETTING_S
             -UB)
 100   3            {
 101   4              SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
 102   4              SETTING_ITEM_SPARK_TIMER = 0;
 103   4              if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD)
 104   4              {
 105   5                TIME_SET_MINUTE(alarmTask_Time, (TIME_GET_MINUTE(alarmTask_Time) + 1)%60);
 106   5              }
 107   4              else
 108   4              {
 109   5                TIME_SET_MINUTE(alarmTask_Time, TIME_GET_MINUTE(alarmTask_Time) == 0 ? 59 : TIME_GET_MINUTE(alarmTask
             -_Time) - 1);
 110   5              }
 111   4              
 112   4            }
C51 COMPILER V9.59.0.0   ALARMTASK                                                         01/10/2019 23:20:41 PAGE 3   

 113   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
 114   3            {
 115   4              SEG_VIEW_ARRAY[3] = ' ';
 116   4              SEG_VIEW_ARRAY[4] = ' ';
 117   4            }
 118   3          }
 119   2          
 120   2        }
 121   1        if(IN_FOREGROUND)
 122   1        {
 123   2          SegScreen_Print_String(SEG_VIEW_ARRAY);
 124   2        }
 125   1        
 126   1      }
 127          void AlarmTask_EnterTask()
 128          {
 129   1        alarmTask_Mode = MODE_RUNNING;
 130   1      }
 131          void AlarmTask_ExitTask()
 132          {
 133   1        alarmTask_Mode = MODE_EXIT;
 134   1        SETTING_ITEM = 0;
 135   1        SETTING_ITEM_SPARK_TIMER = 0;
 136   1        SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
 137   1      }
 138          
 139          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    445    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
