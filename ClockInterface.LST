C51 COMPILER V9.59.0.0   CLOCKINTERFACE                                                    01/10/2019 23:20:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CLOCKINTERFACE
OBJECT MODULE PLACED IN ClockInterface.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ClockInterface.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "Looper\\Looper.h"
   2          #include "ClockInterface.h"
   3          #include "Time.h"
   4          #include "Input.h"
   5          #include "SegScreen\\SegScreen.h"
   6          #include "Date.h"
   7          #include "TaskUtility.h"
   8          #include "TaskSelector.h"
   9          #define KEYCODE_SETTING INPUT_TOKEYCODE(1,1)
  10          #define KEYCODE_SETTING_SHIFT_ITEM INPUT_TOKEYCODE(1,2)
  11          #define KEYCODE_SETTING_SETTING_ADD INPUT_TOKEYCODE(1,3)
  12          #define KEYCODE_SETTING_SETTING_SUB INPUT_TOKEYCODE(2,3)
  13          #define MODE_SETTING 1
  14          #define MODE_RUNNING 0
  15          #define MODE_EXIT 2
  16          #define SPARKING_DURATION 300
  17          #define SPARKING_STATE_SHOW 0
  18          #define SPARKING_STATE_HIDE 1
  19          #define SETTING_ITEM_HOUR 0
  20          #define SETTING_ITEM_MINUTE 1
  21          #define SETTING_ITEM_SECOND 2
  22          TIME clockInterface_Time;
  23          char clockInterface_Mode = 0; //0:Run Setting
  24          #define SETTING_ITEM TaskUtility_Public_Var_uChar1
  25          #define SETTING_ITEM_SPARK_TIMER TaskUtility_Public_Var_uChar2
  26          #define SETTING_ITEM_SPARKSTATE TaskUtility_Public_Var_uChar3
  27          #define SEG_VIEW_ARRAY TaskUtility_Public_Var_SegViewArr
  28          //char clockInterface_SettingItem = 0; //0:Hour 1:Minute 2:Second
  29          //int SETTING_ITEM_SPARK_TIMER = 0;
  30          //char SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
  31          void ClockInterface_Init()
  32          {
  33   1        TIME_SET_HOUR(clockInterface_Time, 0);
  34   1        TIME_SET_MINUTE(clockInterface_Time, 0);
  35   1        TIME_SET_SECOND(clockInterface_Time, 0);
  36   1      }
  37          void ClockInterface_LooperUpdate(LOOPER *looper)
  38          {
  39   1        
  40   1        if(TASKSELECTOR_CURRENT_MODE == TASKSELECTOR_MODE_CLOCK)
  41   1        {
  42   2          Time_ToString(&clockInterface_Time, '.', 0, SEG_VIEW_ARRAY);
  43   2        }
  44   1        if(clockInterface_Mode == MODE_RUNNING)
  45   1        {
  46   2          if(Input_GetKeyDown() == KEYCODE_SETTING)
  47   2          {
  48   3            clockInterface_Mode = MODE_SETTING;
  49   3          }
  50   2        }
  51   1        else if(clockInterface_Mode == MODE_SETTING)
  52   1        {
  53   2          SETTING_ITEM_SPARK_TIMER += looper->deltaTime;
  54   2          if(SETTING_ITEM_SPARK_TIMER >= SPARKING_DURATION/2)
  55   2          {
C51 COMPILER V9.59.0.0   CLOCKINTERFACE                                                    01/10/2019 23:20:40 PAGE 2   

  56   3            SETTING_ITEM_SPARKSTATE = (SETTING_ITEM_SPARKSTATE == SPARKING_STATE_SHOW) ? SPARKING_STATE_HIDE : SPAR
             -KING_STATE_SHOW;
  57   3            SETTING_ITEM_SPARK_TIMER = 0;
  58   3            
  59   3          }
  60   2          if(Input_GetKeyDown() == KEYCODE_SETTING)
  61   2          {
  62   3            clockInterface_Mode = MODE_RUNNING;
  63   3            SETTING_ITEM = 0;
  64   3            SETTING_ITEM_SPARK_TIMER = 0;
  65   3            SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
  66   3          }
  67   2          else if(Input_GetKeyDown() == KEYCODE_SETTING_SHIFT_ITEM)
  68   2          {
  69   3            SETTING_ITEM++;
  70   3            SETTING_ITEM %= 3;
  71   3          }
  72   2          if(SETTING_ITEM == SETTING_ITEM_HOUR)
  73   2          {
  74   3            if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD || Input_GetKeyDown() == KEYCODE_SETTING_SETTING_S
             -UB)
  75   3            {
  76   4              if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD)
  77   4              {
  78   5                TIME_SET_HOUR(clockInterface_Time, (TIME_GET_HOUR(clockInterface_Time) + 1)%24);
  79   5              }
  80   4              else
  81   4              {
  82   5                TIME_SET_HOUR(clockInterface_Time, TIME_GET_HOUR(clockInterface_Time) == 0 ? 23 : (TIME_GET_HOUR(cloc
             -kInterface_Time) - 1));
  83   5              }
  84   4              SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
  85   4              SETTING_ITEM_SPARK_TIMER = 0;
  86   4              
  87   4            }
  88   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
  89   3            {
  90   4              SEG_VIEW_ARRAY[0] = ' ';
  91   4              SEG_VIEW_ARRAY[1] = ' ';
  92   4            }
  93   3          }
  94   2          else if(SETTING_ITEM == SETTING_ITEM_MINUTE)
  95   2          {
  96   3            if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD || Input_GetKeyDown() == KEYCODE_SETTING_SETTING_S
             -UB)
  97   3            {
  98   4              SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
  99   4              SETTING_ITEM_SPARK_TIMER = 0;
 100   4              if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD)
 101   4              {
 102   5                TIME_SET_MINUTE(clockInterface_Time, (TIME_GET_MINUTE(clockInterface_Time) + 1)%60);
 103   5              }
 104   4              else
 105   4              {
 106   5                TIME_SET_MINUTE(clockInterface_Time, TIME_GET_MINUTE(clockInterface_Time) == 0 ? 59 : TIME_GET_MINUTE
             -(clockInterface_Time) - 1);
 107   5              }
 108   4              
 109   4              
 110   4            }
 111   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
 112   3            {
C51 COMPILER V9.59.0.0   CLOCKINTERFACE                                                    01/10/2019 23:20:40 PAGE 3   

 113   4              SEG_VIEW_ARRAY[3] = ' ';
 114   4              SEG_VIEW_ARRAY[4] = ' ';
 115   4            }
 116   3          }
 117   2          else if(SETTING_ITEM == SETTING_ITEM_SECOND)
 118   2          {
 119   3            if(Input_GetKeyDown() == KEYCODE_SETTING_SETTING_ADD || Input_GetKeyDown() == KEYCODE_SETTING_SETTING_S
             -UB)
 120   3            {
 121   4              SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
 122   4              SETTING_ITEM_SPARK_TIMER = 0;
 123   4              TIME_SET_SECOND(clockInterface_Time, 0);
 124   4              TIME_SET_DECISECOND(clockInterface_Time, 0);
 125   4            }
 126   3            if(SETTING_ITEM_SPARKSTATE == SPARKING_STATE_HIDE)
 127   3            {
 128   4              SEG_VIEW_ARRAY[6] = ' ';
 129   4              SEG_VIEW_ARRAY[7] = ' ';
 130   4            }
 131   3          }
 132   2          
 133   2        }
 134   1        if(TASKSELECTOR_CURRENT_MODE == TASKSELECTOR_MODE_CLOCK)
 135   1        {
 136   2          SegScreen_Print_String(SEG_VIEW_ARRAY);
 137   2        }
 138   1        
 139   1      }
 140          
 141          void ClockInterface_OnDeciClockTrigger()
 142          {
 143   1        Time_Add_1_Decisecond(&clockInterface_Time);
 144   1      }
 145          void ClockInterface_EnterTask()
 146          {
 147   1        clockInterface_Mode = MODE_RUNNING;
 148   1      }
 149          void ClockInterface_ExitTask()
 150          {
 151   1        clockInterface_Mode = MODE_EXIT;
 152   1        SETTING_ITEM = 0;
 153   1        SETTING_ITEM_SPARK_TIMER = 0;
 154   1        SETTING_ITEM_SPARKSTATE = SPARKING_STATE_SHOW;
 155   1      }
 156          
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    501    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
