C51 COMPILER V9.59.0.0   SEGSCREEN                                                         01/10/2019 23:20:39 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SEGSCREEN
OBJECT MODULE PLACED IN SegScreen.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SegScreen\SegScreen.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\SegScreen.lst) TABS(2) OBJECT(SegScreen.obj)

line level    source

   1          #include "..\\Looper\\Looper.h"
   2          #include <REG51.H>
   3          #include <absacc.h>
   4          #include "SegScreen.h"
   5          
   6          //From Right To Left--0 to 7
   7          int segScreen_CurrShiftMask = 0x01;
   8          int segScreen_shiftTimer = 0;
   9          unsigned char code segScreen_led_table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x00,0x08,0x40
             -,0x79  };
  10          unsigned char segScreen_led[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  11          char SegScreen_ShiftMaskToIndex(char segMask);
  12          int segScreen_temp_i;
  13          void SegScreen_LooperUpdate(LOOPER *looper)
  14          {
  15   1        segScreen_shiftTimer += looper->deltaTime;
  16   1        XBYTE[0x9000]= segScreen_led[SegScreen_ShiftMaskToIndex(segScreen_CurrShiftMask)];
  17   1        XBYTE[0x8000]= segScreen_CurrShiftMask;
  18   1        if(segScreen_shiftTimer >= SEGSCREEN_SHIFT_INTERVAL_MS)
  19   1        {
  20   2          segScreen_shiftTimer = 0;
  21   2          segScreen_CurrShiftMask = 0xFF & (segScreen_CurrShiftMask << 1);
  22   2          if(segScreen_CurrShiftMask == 0)
  23   2          {
  24   3            segScreen_CurrShiftMask = 0x01;
  25   3          }
  26   2        }
  27   1      }
  28          /*
  29          void SegScreen_SetLed(int index, char ledMask)
  30          {
  31            segScreen_led[index] = ledMask;
  32          }
  33          */
  34          /*
  35          void SegScreen_Print_Int(int value)
  36          {
  37            int temp;
  38            for(segScreen_temp_i = 0; segScreen_temp_i < 8; segScreen_temp_i++)
  39            {
  40              segScreen_led[segScreen_temp_i] = 0x00;
  41            }
  42            temp = value < 0 ? -value : value;
  43            segScreen_temp_i = 0;
  44            if(value == 0)
  45            {
  46              segScreen_led[0] = segScreen_led_table[0];
  47            }
  48            else
  49            {
  50              while(temp != 0 && segScreen_temp_i < 8)
  51              {
  52                segScreen_led[segScreen_temp_i] = segScreen_led_table[temp % 10];
  53                temp = temp / 10;
C51 COMPILER V9.59.0.0   SEGSCREEN                                                         01/10/2019 23:20:39 PAGE 2   

  54                segScreen_temp_i++;
  55              }
  56            }
  57            
  58            if(segScreen_temp_i < 8 && value < 0)
  59            {
  60              segScreen_led[segScreen_temp_i] = 0x40;
  61            }
  62          }
  63          void SegScreen_Print_Bin(int value)
  64          {
  65            for(segScreen_temp_i == 0; segScreen_temp_i < 8; segScreen_temp_i++)
  66            {
  67              segScreen_led[segScreen_temp_i] = segScreen_led_table[(value & 1<<segScreen_temp_i) == 0 ? 0: 1];
  68            }
  69          }
  70          */
  71          //Can only show dot(.) and number(0..9)
  72          void SegScreen_Print_String(char *str)
  73          {
  74   1        int segIndex = 7;
  75   1        for(segScreen_temp_i = 0; segScreen_temp_i < 8; segScreen_temp_i++)
  76   1        {
  77   2          segScreen_led[segScreen_temp_i] = 0x00;
  78   2        }
  79   1        for(segScreen_temp_i = 0; str[segScreen_temp_i] != '\0' && segIndex >= 0; segScreen_temp_i++)
  80   1        {
  81   2          if(str[segScreen_temp_i] == '.')
  82   2          {
  83   3            segScreen_led[segIndex+1] = segScreen_led[segIndex+1] | 0x80;
  84   3          }
  85   2          else
  86   2          {
  87   3            if(str[segScreen_temp_i] == ' ')
  88   3            {
  89   4              segScreen_led[segIndex] = 0;
  90   4            }
  91   3            else if(str[segScreen_temp_i] == '-')
  92   3            {
  93   4              segScreen_led[segIndex] = 0x40;
  94   4            }
  95   3            else
  96   3            {
  97   4              segScreen_led[segIndex] = segScreen_led_table[str[segScreen_temp_i] - '0'];
  98   4            }
  99   3            
 100   3            segIndex--;
 101   3          }
 102   2        }
 103   1      }
 104          char SegScreen_ShiftMaskToIndex(char segMask){
 105   1        for(segScreen_temp_i = 0; segScreen_temp_i < 8; segScreen_temp_i++)
 106   1        {
 107   2          if((segMask & (1 << segScreen_temp_i)) != 0)
 108   2          {
 109   3            return segScreen_temp_i;
 110   3          }
 111   2        }
 112   1        return -1;
 113   1      }


C51 COMPILER V9.59.0.0   SEGSCREEN                                                         01/10/2019 23:20:39 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    313    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
